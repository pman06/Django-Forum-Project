version: 2.1

commands:
  destroy-environment:
    steps:
      - run:
          name: destroy environments
          command: aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}
          when: on_fail

orbs:
  aws-cli: circleci/aws-cli@3.1.1

jobs:
  create-infrastructure:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY
          aws-secret-access-key: AWS_SECRET_KEY
          aws-region: AWS_REGION_NAME
      - run:
          name: Create cloudformation stack
          command: |
            aws cloudformation deploy --template-file template.yml --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
            --region us-east-1
      - run:
          name: Get running instance IP
          command: |
            echo "[all]" > inventory
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filter "Name=tag:Projects,Values=udacity" \
            --output text >> inventory
      - persist_to-workspace:
          root: ./
          paths:
            - inventory

  config_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "c0:3d:35:85:bb:69:71:39:8a:61:b4:b7:61:25:e0:6a"
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - attach_workspace:
          at: ./
      - run:
          name: Run Playbook and Configure Server
          command: |
            ansible-playbook main-remote.yml -i ./inventory
  
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Smoke Run
          command: |
            apk add curl
            URL="https://www.udacity.com/blog"
            if curl -s --head ${URL}
            then
              echo "It Runs alright"
              return 1
            else
              return 1
            fi
      - destroy-environment 

workflows:
  createin-frastructure:
    jobs:
      - create-infrastructure      
      - config_infrastructure:
          requires:
            - create-infrastructure
      - smoke_test:
          requires:
            - config_infrastructure
