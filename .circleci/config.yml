version: 2.1

default: &aws-image
  docker:
      - image:  amazon/aws-cli

commands:
  destroy-environment:
    steps:
      - run:
          name: destroy environments
          command: aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
  
  setup_aws:
    steps:
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY
          aws-secret-access-key: AWS_SECRET_KEY
          aws-region: AWS_REGION_NAME

orbs:
  aws-cli: circleci/aws-cli@3.1.1

jobs:
  create-infrastructure:
    executor: aws-cli/default
    steps:
      - checkout
      - setup_aws
      - run:
          name: Create cloudformation stack
          command: |
            aws cloudformation deploy --template-file template.yml --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
            --region us-east-1
      - run:
          name: Get running instance IP
          command: |
            echo "[all]" > inventory
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filter "Name=tag:Projects,Values=udacity" \
            --output text >> inventory
      - persist_to_workspace:
          root: ./
          paths:
            - inventory

  config_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "c0:3d:35:85:bb:69:71:39:8a:61:b4:b7:61:25:e0:6a"
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - attach_workspace:
          at: ./
      - run:
          name: Run Playbook and Configure Server
          command: |
            ansible-playbook main-remote.yml -i ./inventory
  
  smoke_test:
    executor: aws-cli/default
    steps:
      - checkout
      - setup_aws
      - run:
          name: Smoke Run
          command: |
            apk add curl
            URL="https://www.udacity.com/blog"
            if curl -s --head ${URL}
            then
              echo "It Runs alright"
              return 1
            else
              return 1
            fi
      - destroy-environment 
  
  create_and_deploy_front_end:
    <<: *aws-image
    steps:
      - checkout
      - setup_aws
      - run:
          name: Execute bucket.yml 
          command: |
            aws cloudformation deploy --template-file bucket.yml \
            --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
      - run: aws  s3 cp index.html s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment

  get_last_deployment_id:
    <<: *aws-image
    steps:
      - checkout
      - setup_aws
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release
          command: |
            aws cloudformation list-exports --region=us-east-1 --query "Exports[?Name=='PipelineID'].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - textfile.txt
  
  promote_to_production:
    <<: *aws-image
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}" 
      - destoy-environment

  clean_up_old_front_end:
    <<: *aws-image
    steps:
      - checkout
      - run: yum install -v tar -gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy previous S3 bucket and Cloudformation stack.
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3//${OldBucketID}" --recursive
      - destoy-environment



workflows:
  #createin-frastructure:
   # jobs:
      #- create-infrastructure      
      #- config_infrastructure:
       #   requires:
        #    - create-infrastructure
      #- smoke_test:
       #   requires:
        #    - config_infrastructure
  create-resoiurces:
    jobs:
      - create_and_deploy_front_end
      - promote_to_production:
          requires:
            - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production